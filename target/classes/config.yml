# |------------------------------------------------------------|
# |      ____  _        _ _        ____                        |
# |     / ___|| |_ _ __(_) | _____/ ___| _   _ _ __   ___      |
# |     \___ \| __| '__| | |/ / _ \___ \| | | | '_ \ / __|     |
# |      ___) | |_| |  | |   <  __/___) | |_| | | | | (__      |
# |     |____/ \__|_|  |_|_|\_\___|____/ \__, |_| |_|\___|     |
# |                                      |___/                 |
# |            v1.0 by @owengregson                            |
# |------------------------------------------------------------|

async-hitreg:               # Register hits asynchronously to improve responsiveness in combat.
  enabled: true             # Enable or disable asynchronous hit registration.
  max-cps: 20               # Maximum clicks per second for hit registration.

knockback:                  # The values provided here are the defaults for MC 1.8.8 knockback.
  enabled: true             # Enable or disable the knockback module.
  async: false              # Whether to handle knockback asynchronously.
  base:
    horizontal: 0.4         # Base horizontal knockback applied to the victim.
    vertical: 0.4           # Base vertical knockback applied to the victim.
  extra:
    horizontal: 0.5         # Extra horizontal knockback for sprinting or enchantments.
    vertical: 0.1           # Extra vertical knockback for sprinting or enchantments.
  limits:
    vertical: 0.4           # Maximum vertical knockback (set to -1 for no limit).
    horizontal: -1          # Maximum horizontal knockback (set to -1 for no limit).
  friction:
    x: 0.5                  # Friction coefficient for X-axis velocity.
    y: 0.5                  # Friction coefficient for Y-axis velocity.
    z: 0.5                  # Friction coefficient for Z-axis velocity.
  modifiers:
    sprint: 1.0             # Sprinting multiplier for knockback.
    armor-resistance: false # Enable or disable armor knockback resistance.

debug:                      # Chat logging that is useful when creating custom knockback profiles.
  enabled: false            # Enable or disable debug mode.

# Knockback Formula Explanation (In order of calculation):
# The knockback module calculates the velocity of the victim when hit by an attack
# using an improved version of the formula used in Minecraft 1.8.8. The knockback
# is determined by several factors, explained in significant detail below.

# Direction:
# The knockback direction is determined by the relative positions of the attacker and the victim.
# Specifically, it is calculated using the difference in X and Z coordinates (deltaX and deltaZ).
# If the direction is too small (such as players being on top of each other),
# a small random adjustment ensures a valid knockback direction.

# Magnitude:
# The magnitude of the knockback is calculated as the
# Euclidean distance between the attacker and the victim,
# ignoring the Y (vertical) difference:
# magnitude = sqrt(deltaX^2 + deltaZ^2)

# Base Velocity Calculation:
# The initial velocity components (xVel, yVel, zVel) are calculated as follows:
# xVel = (current X velocity * frictionX) - (deltaX / magnitude * base horizontal knockback)
# yVel = (current Y velocity * frictionY) + base vertical knockback
# zVel = (current Z velocity * frictionZ) - (deltaZ / magnitude * base horizontal knockback)

# Horizontal Limit:
# If a horizontal knockback limit is set, it caps the maximum horizontal velocity to the specified limit.
# This is useful to prevent excessive horizontal knockback.

# Sprinting and Enchantments:
# Additional knockback is applied if the attacker is sprinting or has a knockback enchantment on their weapon.
# The extra horizontal knockback is multiplied by the sprint factor and enchantment level:
# extra horizontal knockback = (sprint factor + knockback enchantment level) * extra horizontal knockback
# extra vertical knockback is added as a constant:
# yVel += extra vertical knockback

# Vertical Limit:
# The vertical knockback limit ensures that the Y (vertical) velocity does not exceed a specified value.
# If the calculated Y velocity exceeds this limit, it is capped to the limit.

# Armor Resistance:
# If enabled, armor resistance reduces the knockback effect based on the victim's armor attributes.
# The resistance is calculated as:
# resistance = 1 - victim's armor knockback resistance attribute
# The final velocity is then multiplied by this resistance factor.

# Final Velocity:
# The final velocity is the combination of the base velocity, horizontal and vertical limits,
# and any extra knockback due to sprinting or enchantments.
# The configured friction values also influence the final velocity, retaining some of the victim's current velocity.

# Configuring Knockback Values:
# Adjust the values in the configuration file to fine-tune the knockback behavior according to your preferences.
# Higher values generally result in stronger knockback effects, while lower values reduce the knockback.